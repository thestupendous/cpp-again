// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMACUST_CUSTDATA_H_
#define FLATBUFFERS_GENERATED_SCHEMACUST_CUSTDATA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace custData {

struct Cust;
struct CustBuilder;

struct Cust FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CustBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_MOBILE = 6,
    VT_KHARCHA = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint64_t mobile() const {
    return GetField<uint64_t>(VT_MOBILE, 0);
  }
  double kharcha() const {
    return GetField<double>(VT_KHARCHA, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint64_t>(verifier, VT_MOBILE, 8) &&
           VerifyField<double>(verifier, VT_KHARCHA, 8) &&
           verifier.EndTable();
  }
};

struct CustBuilder {
  typedef Cust Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Cust::VT_NAME, name);
  }
  void add_mobile(uint64_t mobile) {
    fbb_.AddElement<uint64_t>(Cust::VT_MOBILE, mobile, 0);
  }
  void add_kharcha(double kharcha) {
    fbb_.AddElement<double>(Cust::VT_KHARCHA, kharcha, 0.0);
  }
  explicit CustBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Cust> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Cust>(end);
    return o;
  }
};

inline flatbuffers::Offset<Cust> CreateCust(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint64_t mobile = 0,
    double kharcha = 0.0) {
  CustBuilder builder_(_fbb);
  builder_.add_kharcha(kharcha);
  builder_.add_mobile(mobile);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Cust> CreateCustDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint64_t mobile = 0,
    double kharcha = 0.0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return custData::CreateCust(
      _fbb,
      name__,
      mobile,
      kharcha);
}

inline const custData::Cust *GetCust(const void *buf) {
  return flatbuffers::GetRoot<custData::Cust>(buf);
}

inline const custData::Cust *GetSizePrefixedCust(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<custData::Cust>(buf);
}

inline bool VerifyCustBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<custData::Cust>(nullptr);
}

inline bool VerifySizePrefixedCustBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<custData::Cust>(nullptr);
}

inline void FinishCustBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<custData::Cust> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCustBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<custData::Cust> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace custData

#endif  // FLATBUFFERS_GENERATED_SCHEMACUST_CUSTDATA_H_
